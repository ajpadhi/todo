apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-server-cm
data:
  nginx.conf: |
    server {
        listen 8000;
        port_in_redirect off;

        include /usr/local/openresty/nginx/conf/mime.types;

        gzip on;
        gzip_vary on;
        gzip_min_length 10240;
        gzip_proxied expired no-cache no-store private auth;
        gzip_types text/plain text/css text/xml text/javascript application/javascript application/x-javascript application/xml font/woff2;
        gzip_disable "MSIE [1-6]\.";

        large_client_header_buffers 4 32k;
        resolver 64.102.6.247 ipv6=off;

        location / {
            access_by_lua_block {
                local opts = {
                    redirect_uri = "https://{{ .Values.fqdn }}/oauth2/callback",
                    {{- if .Values.sso.prod }}
                    discovery = "https://cloudsso.cisco.com/.well-known/openid-configuration",
                    {{- else }}
                    discovery = "https://cloudsso-test.cisco.com/.well-known/openid-configuration",
                    {{- end }}
                    client_id = "{{ required "SSO Client ID is required" .Values.sso.client_id }}",
                    client_secret = "{{ required "SSO Client Secret is required" .Values.sso.client_secret }}",
                    scope = "openid",
                    ssl_verify = "no",
                    accept_none_alg = false,
                    accept_unsupported_alg = false,
                    renew_access_token_on_expiry = true,
                    access_token_expires_in = 3600,
                    revoke_tokens_on_logout = true,
                }

                local res, err = require("resty.openidc").authenticate(opts)
                if err then
                    ngx.status = 500
                    ngx.say(err)
                    ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
                end

                ngx.req.set_header("X-USER", res.id_token.sub)
                ngx.req.set_header("X-TOKEN", res.access_token)
            }

            root /www/build;
            index index.html;
        }

        location /api {
            if ($request_method = OPTIONS) {
                add_header Access-Control-Allow-Origin $http_origin always;
                add_header Access-Control-Allow-Methods 'GET, POST, PUT, DELETE, OPTIONS';
                add_header Content-Type text/plain;
                add_header Content-Length 0;
                return 204;
            }

            access_by_lua_block {
                if ngx.req.get_headers()["authorization"] then
                    local opts = {
                        {{- if .Values.sso.prod }}
                        discovery = "https://cloudsso.cisco.com/.well-known/openid-configuration",
                        {{- else }}
                        discovery = "https://cloudsso-test.cisco.com/.well-known/openid-configuration",
                        {{- end }}
                        client_id = "{{ .Values.sso.client_id }}",
                        client_secret = "{{ .Values.sso.client_secret }}",
                        scope = "openid",
                        ssl_verify = "no",
                    }

                    local res, err = require("resty.openidc").introspect(opts)
                    if err then
                        ngx.status = 403
                        ngx.say(err)
                        ngx.exit(ngx.HTTP_FORBIDDEN)
                    end

                    ngx.req.set_header("X-USER", res.uid)
                    ngx.req.set_header("Authorization", ngx.req.get_headers()["authorization"])
                else
                    local opts = {
                        redirect_uri = "https://{{ .Values.fqdn }}/oauth2/callback",
                        {{- if .Values.sso.prod }}
                        discovery = "https://cloudsso.cisco.com/.well-known/openid-configuration",
                        {{- else }}
                        discovery = "https://cloudsso-test.cisco.com/.well-known/openid-configuration",
                        {{- end }}
                        client_id = "{{ .Values.sso.client_id }}",
                        client_secret = "{{ .Values.sso.client_secret }}",
                        scope = "openid",
                        ssl_verify = "no",
                        accept_none_alg = false,
                        accept_unsupported_alg = false,
                        renew_access_token_on_expiry = true,
                        access_token_expires_in = 3600,
                        revoke_tokens_on_logout = true,
                    }

                    local res, err = require("resty.openidc").authenticate(opts)
                    if err then
                        ngx.status = 500
                        ngx.say(err)
                        ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
                    end

                    ngx.req.set_header("X-USER", res.id_token.sub)
                    ngx.req.set_header("Authorization", "Bearer " .. res.access_token)
                end
            }

            rewrite ^/api(/.*)$ $1 break;
            proxy_pass http://{{ .Release.Name }}-api-svc.{{ .Release.Namespace }}.svc.cluster.local:8000/;
        }

        location = /api/v1/auth/login {
            rewrite ^/api(/.*)$ $1 break;
            proxy_pass http://{{ .Release.Name }}-api-svc.{{ .Release.Namespace }}.svc.cluster.local:8000/;
        }
    }
